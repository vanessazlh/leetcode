class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        # DAC solution
        # base case
        if len(nums) == 1:
            return nums[0]

        # divide the array into left and right
        mid = len(nums) // 2
        # find left and right max respectively
        left_max = self.maxSubArray(nums[:mid])
        right_max = self.maxSubArray(nums[mid:])

        # find cross_max that must contain nums[mid]
        max_l = float('-inf')
        curr_sum = 0
        for i in range(mid - 1, -1, -1):
            curr_sum += nums[i]
            max_l = max(curr_sum, max_l)
        
        max_r = float('-inf')
        curr_sum = 0
        for i in range(mid, len(nums)):
            curr_sum += nums[i]
            max_r = max(curr_sum, max_r)

        cross_max = max_r + max_l

        return max(left_max, right_max, cross_max)


        
        
