# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        output = []

        if not root:
            return output
        
        queue = collections.deque()
        queue.append(root)

        while queue:
            length = len(queue)
            new_level = []
            for i in range(length):
                node = queue.popleft()
                new_level.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            
            output.append(new_level)

        return output


### Analysis        
Time Complexity: O(N)
Space Complexity: O(N)

### Takeaways:
using collections.deque to maintain a queue
