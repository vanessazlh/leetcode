def quick_sort(arr, low, high):

	if low < high:
		mid = partition(arr, low, high)
		quick_sort(arr, low, mid - 1)
		quick_sort(arr, mid + 1, high)
	
def partition(arr, low, high):
    pivot = arr[high]  # Choosing the last element as pivot
    i = low           # Starts at the beginning to find elements bigger than pivot
    j = high - 1      # Starts just before the pivot to find elements smaller than pivot

    while True:
        # Move `i` right until we find an element > pivot
        while i <= j and arr[i] <= pivot:
            i += 1

        # Move `j` left until we find an element < pivot
        while i <= j and arr[j] >= pivot:
            j -= 1

        # If pointers cross, exit the loop
        if i >= j:
            break

        # Swap elements at `i` and `j`
        arr[i], arr[j] = arr[j], arr[i]

    # Place the pivot in its correct position
    arr[i], arr[high] = arr[high], arr[i]
    return i // return sorted index
